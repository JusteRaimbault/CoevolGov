
;;
;  setup


to setup:setup
  
  if global:headless? != true [ca]
  
  output-show "Setting up"
  
  ;;
  ; global vars
  setup:setup-globals
  
  ;;
  ; check conditions
  setup:assert-conditions
  
  ;;
  ; cities
  setup:setup-cities
  
  ;;
  ; network
  setup:initial-network
  setup:setup-matrices
  
  ;cities:update-gravity-weights ; done in network setup
  
  setup:setup-indicators
 
  reset-ticks 
  setup:setup-display
 
  indicators:update-indicators
  
  ;output-print (word "average log population " mean [ln city:population] of cities)
  ;output-print (word "average travel time " mean (utils:list:concatenate matrix:to-row-list global:distance-matrix))
  
  ; not in globals so it is not reset - for run with baseline
  set global:indicators table:make
  
end


;;
;  partial setup
to setup:reset
  setup:setup-globals
  
  ;setup:setup-matrices
  setup:reset-populations
  setup:reset-links
  ;setup:reset-distances ; not necessary
  setup:setup-matrices
  setup:setup-indicators
  reset-ticks
  clear-all-plots
  display:update-display
  display:color-patches
  
  indicators:update-indicators
  
  ;output-print (word "average log population " mean [ln city:population] of cities)
  ;output-print (word "average travel time " mean (utils:list:concatenate matrix:to-row-list global:distance-matrix))
  
end

to setup:reset-populations
  ask cities [set city:population matrix:get global:populations city:index 0]
end

to setup:reset-links
  ask paths [path:new-path]
  ask pair-paths [set pair-path:flow 0]
end

;;
;
to setup:reset-distances
  if not table:has-key? global:distance-matrices (first global:dates) [error (word "Partial setup error: distance matrix for date " (first global:dates) " was not set - do a full setup")]
  set global:distance-matrix matrix:copy table:get global:distance-matrices (first global:dates)
end


to setup:setup-globals
  
  ;set global:synthetic-rank-size-exp 1
  
  set global:synthetic-cities-number 30
  
  set global:synthetic-max-pop 100000
  
  set global:growth-rate 0
  set global:gravity-weight 0.01
  
  set global:alpha0 3 set global:n0 3
  
  set global:network-setup-node-distance 15;20
  
  set global:network-setup-link-deletion-proportion 0.2
  
  set global:pair-paths-hidden? true
  
  set global:governance-cost-to-access -1 ; unset scaled parameter
  set global:governance-collab-cost-set? false
  
end


;;
; check conditions on parameters to avoid runtime errors
to  setup:assert-conditions
  
  if global:synthetic-cities-number <= 0 [error "Number of cities must be positive"]
  
  if global:gravity-decay <= 0 [error "gravity-decay must be strictly positive"]

end



to setup:setup-cities
  
  ;output-show "    cities"
  
  let i 1 let index 1
  let xmin min-pxcor + 10 let xmax min-pxcor + ((max-pxcor - min-pxcor) / 2) - 10
  create-cities global:synthetic-cities-number [
    ;setxy random-xcor random-ycor
    move-to one-of patches with [count cities in-radius 10 = 0 and pxcor >= xmin and pxcor <= xmax and pycor >= min-pycor + 10 and pycor <= max-pycor - 10]
    set city:index (index - 1)
    set city:population global:synthetic-max-pop / (i ^ global:synthetic-rank-size-exp)
    set i i + 1 set index index + 1
    if index = (floor global:synthetic-cities-number / 2) + 1 [set i 1 set xmin min-pxcor + ((max-pxcor - min-pxcor) / 2) + 10 set xmax max-pxcor - 10]
    city:new-city
  ]
  
  ;;
  ; draw the boundary
  crt 1 [setxy min-pxcor + (max-pxcor - min-pxcor) / 2 min-pycor set color green set pen-size 4 pen-down set heading 0 while [ycor < max-pycor][fd 1] die]

  ;; set global countries variable
  set global:countries remove-duplicates [city:country] of cities
  
end


to setup:initial-network
  
  ;output-show "    initial network"
  
  foreach utils:list:seq min-pxcor max-pxcor global:network-setup-node-distance [x ->
      foreach utils:list:seq min-pycor max-pycor global:network-setup-node-distance [ y ->
          create-nodes 1 [setxy x y node:new-node]
      ]
  ]
        
  ask nodes [create-paths-with (other nodes in-radius (global:network-setup-node-distance * sqrt 2)) [path:new-path]]
  ask n-of (global:network-setup-link-deletion-proportion * count links) links [die]
  planarize-network nodes paths
  ask nodes [ ; jitter
     set xcor (max (list min-pxcor (min (list max-pxcor (xcor - global:network-setup-node-distance / 4 + (2 * random (global:network-setup-node-distance / 4)))))))
     set ycor (max (list min-pycor (min (list max-pycor (ycor - global:network-setup-node-distance / 4 + (2 * random (global:network-setup-node-distance / 4)))))))
  ]
        
  ;ask cities [create-paths-with (other turtles in-radius (slime-mould-node-distance * (sqrt 2) / 2))[new-path]]
  network-utils:connexify-network-link-projection
  ;planarize-network turtles paths
  
  
  ask paths [path:new-path]
  ask paths with [path:length = 0] [die]   
  
  ;;
  ; pair paths
  let i 0 repeat (count cities) - 1 [let j i + 1 repeat (count cities - i - 1) [ask city i [create-pair-path-with city j [set hidden? true set color blue]] set j j + 1] set i i + 1]
  
  ;network:update-nw-measures network:compute-nw-measures ; can not do this here as gravity flow matrix is not set
  
end



to setup:setup-matrices
    
  ;output-show "    matrices"
  
  let n count cities
    
  ;;
  ; euclidian distance matrix - used in case of a crow fly distance network and no assignement
  ;let xcors [] let ycors [] let pops [] foreach sort-by [[?1 ?2] -> [city:index] of ?1 < [city:index] of ?2] cities [
  ;  ? -> ask ? [set xcors lput xcor xcors set ycors lput ycor ycors set pops lput city:population pops]
  ;]
  ;let xi matrix:from-row-list (utils:list:rep xcors n) let xj matrix:from-column-list (utils:list:rep xcors n) let yi matrix:from-row-list (utils:list:rep ycors n) let yj matrix:from-column-list (utils:list:rep ycors n)
  ;set global:distance-matrix matrix:map sqrt ((matrix:times-element-wise (xi matrix:- xj) (xi matrix:- xj)) matrix:+ (matrix:times-element-wise (yi matrix:- yj) (yi matrix:- yj)))
   
  set global:distance-matrix matrix:make-constant n n 0 
  ; gravity flows setup after population - a first network update to have not flows but distance and gravity weights, requires empty gravity flows
  set global:gravity-flows matrix:make-constant n n 0 
  network:update-nw-measures network:compute-nw-measures  
  
  set global:country-decay-matrix matrix:make-constant n n 0
  ask cities [
    let i city:index let ci city:country ask cities [let j city:index let cj city:country ifelse ci = cj 
    [matrix:set global:country-decay-matrix i j 1][matrix:set global:country-decay-matrix i j global:gravity-international-flows-ratio]]
  ]
  ;show (word "country decay avg = " matrix:mean global:country-decay-matrix)
  
  ; feedback distance matrix
  ;let xcors [] let ycors []
  let pops []
  foreach sort-by [[?1 ?2] -> [city:index] of ?1 < [city:index] of ?2] cities [c -> ask c [
    ;set xcors lput xcor xcors set ycors lput ycor ycors
    set pops lput city:population pops
  ]]
  ;let xi matrix:from-row-list (utils:list:rep xcors n) let xj matrix:from-column-list (utils:list:rep xcors n) let yi matrix:from-row-list (utils:list:rep ycors n) let yj matrix:from-column-list (utils:list:rep ycors n)
  ;show pops    
  
  ; dates
  set global:dates utils:list:seq 0 global:final-time-step 1
   
  ; population matrices
  set global:populations matrix:make-constant n (global:final-time-step + 1) 1
  ;set global:real-populations matrix:make-constant n (global:final-time-step + 1) 1 ; no real application for now
  matrix:set-column global:populations 0 pops
    
  ; setup history of distances
  set global:distance-matrices table:make
  table:put global:distance-matrices (first global:dates) matrix:copy global:distance-matrix
  
  ;show cities:gravity-flows pops
  set global:gravity-flows matrix:copy cities:gravity-flows pops
  ;set global:feedback-flows matrix:make-constant n n 0
  ; network:update-distance-matrices ; updating matrices when network measures have not been computed makes no sense
  network:update-nw-measures network:compute-nw-measures  
  
end



to setup:setup-indicators
  
  set global:indicator-sampling-time-step 1
  
  set global:indicator-sample-cities to-list cities
  
  set global:city-values-table table:make
  
  set global:governance-access-diffs []
  set global:governance-cost-diffs []
  set global:governance-probas []
  set global:governance-collab []
  set global:governance-level []
  
end


to setup:setup-display
  if global:headless? != true [
    display:color-patches
    display:display-cities
    display:display-network
    display:display-plots
  ]
end



to setup:setup-headless
  
  ;set global:show-virtual-flows? false
  
  ; test effect of cities number ?
  ;set global:synthetic-cities-number 30
  ;set synthetic-rank-size-exp 1.2
  ;set global:synthetic-max-pop 100000
  ;set network-reinforcment-exponent 1.0
  
  ;set physical-network-reinforcment-threshold 0.1
  ;set physical-network-reinforcment-quantile 0.95
  
  ;set slime-mould-reinforcment-function "full-growth"
  ;set slime-mould-reinforcment-function "thresholded"
  
  ;set global:synthetic-shortcut-number 30
  ;set global:synthetic-city-max-degree 5
  ;set global:synthetic-shortcut-radius 30
  
end





